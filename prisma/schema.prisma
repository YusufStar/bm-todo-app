// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum ProjectStatus {
  NOT_STARTED
  IN_PROGRESS
  STOPPED
  COMPLETED
  ARCHIVED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum TaskStatus {
  NOT_STARTED
  CANCELLED
  IN_PROGRESS
  REVIEW
  COMPLETED
}

enum CompanyRole {
  OWNER
  ADMIN
  MEMBER
}

enum ProjectRole {
  ADMIN
  PROJECT_ADMIN
  DEVELOPER
  TESTER
  MARKETING
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  name      String?
  avatar    String?
  paid      Boolean   @default(false)
  lastLogin DateTime?

  // Companies owned by the user
  ownedCompanies Company[] @relation("CompanyOwner")
  
  // Companies where user is a member
  companyMemberships CompanyMember[]

  // Project memberships
  projectMemberships ProjectMember[]

  // Assigned tasks
  assignedTasks Task[]
  
  // Task comments created by user
  comments TaskComment[]

  // Invitations sent by this user
  sentInvitations CompanyInvitation[] @relation("InvitationSender")

  // Received invitations (based on email)
  receivedInvitations CompanyInvitation[] @relation("InvitationReceiver")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
}

model Company {
  id          String  @id @default(uuid())
  name        String
  description String?
  logo        String?
  website     String?

  // Owner of the company
  owner   User   @relation("CompanyOwner", fields: [ownerId], references: [id])
  ownerId String

  // Members of the company with their roles
  members CompanyMember[]

  // Pending invitations
  invitations CompanyInvitation[]

  // Projects of the company
  projects Project[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ownerId])
  @@index([name])
}

model CompanyInvitation {
  id String @id @default(uuid())

  // The company sending the invitation
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String

  // The user who sent the invitation
  sender   User   @relation("InvitationSender", fields: [senderId], references: [id])
  senderId String

  // Email of the invited person
  invitedEmail String

  // The user who received the invitation (set after registration if not exists)
  receiver   User?   @relation("InvitationReceiver", fields: [receiverId], references: [id])
  receiverId String?

  // Role to be assigned
  role CompanyRole @default(MEMBER)

  // Invitation status
  status InvitationStatus @default(PENDING)

  // Response tracking
  acceptedAt DateTime?
  rejectedAt DateTime?
  cancelledAt DateTime?

  // Optional message
  message String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([companyId])
  @@index([invitedEmail])
  @@index([status])
  @@index([receiverId])
}

model CompanyMember {
  id        String      @id @default(uuid())
  role      CompanyRole @default(MEMBER)
  company   Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, companyId])
  @@index([companyId])
  @@index([userId])
}

model Project {
  id          String        @id @default(uuid())
  name        String
  description String?
  status      ProjectStatus @default(NOT_STARTED)

  dueDate   DateTime?
  priority  Priority  @default(LOW)
  budget    Int?
  startDate DateTime?
  endDate   DateTime?
  board     Json?

  // Project visibility
  isPublic Boolean @default(false)

  // Company that owns the project
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String

  // Project members with their roles (from company members)
  members ProjectMember[]

  // Project related data
  tasks     Task[]
  documents ProjectDocument[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([companyId])
  @@index([status])
  @@index([name])
}

model ProjectMember {
  id        String      @id @default(uuid())
  role      ProjectRole @default(DEVELOPER)
  project   Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, projectId])
  @@index([projectId])
  @@index([userId])
}

model Task {
  id            String     @id @default(uuid())
  name          String
  content       String     // Content - markdown
  estimatedTime Int?      // in minutes
  spentTime     Int?      // in minutes
  status        TaskStatus @default(NOT_STARTED)
  priority      Priority   @default(LOW)
  dueDate       DateTime?

  // Task assignee
  assignee   User?   @relation(fields: [assigneeId], references: [id])
  assigneeId String?

  // Project relationship
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  // Parent-child relationship for subtasks
  parentTask   Task?   @relation("TaskToSubtasks", fields: [parentTaskId], references: [id])
  parentTaskId String?
  subtasks     Task[]  @relation("TaskToSubtasks")

  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  comments  TaskComment[]

  @@index([projectId])
  @@index([assigneeId])
  @@index([status])
  @@index([parentTaskId])
}

model TaskComment {
  id      String @id @default(uuid())
  content String

  // Comment author
  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([taskId])
  @@index([authorId])
}

model ProjectDocument {
  id          String  @id @default(uuid())
  name        String
  content     String
  description String?
  fileType    String?
  fileSize    Int?

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId])
}
